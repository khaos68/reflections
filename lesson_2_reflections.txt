What happens when you initialize a repository? Why do you need to do it?

A hidden directory (.git) is added to the working directory. To git to be able to track all the changes to the files.


How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area only has the files to be commited. The working area has all the actual files and the repository has the version-controlles files grouped in commits. 


How can you use the staging area to make sure you have one commit per logical change?

I can include in the staging area all the files affected by one logical change and then execute the commit command.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Some situations where branches would be helpful would be when testing new functionality, advance with a new version code while mantaining the actual one or testing possible bug correction strategies. Branches help mantaining separated code versions in a managed way.


How do the diagrams help you visualize the branch structure?

They visually show where in the commit history each new branch was made and which commits area included in each branch.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The code if the files is merged in one version code containing the modifications of both branches. We represente them as a the path retruning to the main path because we are merging both.


What are the pros and cons of Git's automatic merging vs. always doing merges manually?

Automatic commits covers almost all scenarios so for the most cases is a quicker more efficient way of mergin branchs. Manually, although, is more precise is only neceesarry when automatic commit can resolve the issues.

